/*
 *
 * Copyright 2013-2014 by MotionPortrait, Inc.
 *
 * All rights reserved.
 *
 */

#ifndef MPCTLITEM_H_
#define MPCTLITEM_H_

#include "mptypes.h"

#ifdef WEBGL
#include <string>
#endif

namespace motionportrait {


class MpCtlItemImpl;

/**
 * \class MpCtlItem
 *
 * MpCtlItem class controls items on face
 */
class MpCtlItem {

  public:

    /** item data id */
#ifdef WEBGL
    typedef intptr_t ItemId;
#else
    typedef void* ItemId;
#endif

    /**
     * create item data
     * note: this API must be called from GL thread
     *
     * @param pathItem : path to item data.
     *                   item data can be generated by MpCtlItemEdit tool.
     * @return item data id
     */
    ItemId Create(const char *pathItem);

    /**
     * destroy item data
     * note: this API must be called from GL thread
     *
     * @param id : item data id to be destroyed
     */
    mpResult Destroy(ItemId id);

    /**
     * bind item to face
     *
     * @param id : item data id to be bound
     */
    mpResult SetItem(ItemId id, int depth = 0);

    /**
     * unbind item to face
     *
     * @param id : item data id to be unbound
     */
    mpResult UnsetItem(ItemId id);

    /**
     * @name parameter settings API
     * @{
     */
    typedef struct {
        float scalex;   /**< horizontal scale. default is 1.0 */
        float scaley;   /**< vertical scale. default is 1.0 */
        float movex;    /**< horizontal translation */
        float movey;    /**< vertical translation */
    } AdjustParam;
    /**
     * adjust size and position of item
     *
     * @param id     : item data id to be adjusted
     * @param adjust : size, position of item
     */
    mpResult Adjust(ItemId id, MpCtlItem::AdjustParam &adjust);

    /**
     * set color value of item
     *
     * @param id    : item data id to be controlled
     * @param red   : red value of item data
     * @param green : green value of item data
     * @param blue  : blue value of item data
     */
    mpResult SetColor(ItemId id, float red, float green, float blue);

    /**
     * set alpha value of item transparency
     *
     * @param id    : item data id to be controlled
     * @param alpha : alpha value of item data
     */
    mpResult SetAlpha(ItemId id, float alpha);

    /** @}  - parameter settings */

    /**
     * change texture image
     *
     * @param id   : item data id to be controlled
     * @param w    : texture width
     * @param h    : texture height
     * @param rgba : texture RGBA image data
     */
    mpResult ChangeTexture(ItemId id, int w, int h, void *rgba);

    /**
     * @name glasses API
     */
    typedef enum {
        GLASSES_TEX_COLOR,      /**< color lens texture */
        GLASSES_TEX_MIRROR,     /**< lens reflection texture */
        GLASSES_TEX_LENS,       /**< lens texture */
    } GlassesTexType;

    /**
     * set glasses texture
     *
     * @param id      : item data id to be controlled
     * @param tex     : texture type
     * @param pathImg : path to PNG image file
     */
    mpResult SetGlassesTexture(ItemId id,
                GlassesTexType tex, const char *pathImg);

    /**
     * set glasses lens color
     *
     * @param id  : item data id to be controlled
     * @param col : lens color to be set
     */
    mpResult SetGlassesLensColor(ItemId id, mpColor &col);

    /**
     * adjust glasses rotation and temple
     */
    typedef struct {
        float rotx;     /**< X axis rotation in degree. */
        float roty;     /**< Y axis rotation in degree. */
        float rotz;     /**< Z axis rotation in degree. */
        float templex;  /**< horizontal position of temple */
        float templey;  /**< vertical   position of temple */
    } AdjustGlassesParam;
    /**
     * adjust glasses rotation and temple position
     *
     * @param id     : glasses data id to be adjusted
     * @param adjust : rotation, temple position of glasses
     */
    mpResult AdjustGlasses(ItemId id, MpCtlItem::AdjustGlassesParam &adjust);

    /** @}  - glasses API */

#ifdef WEBGL
    ItemId Create(std::string pathItem) {
        return this->Create(pathItem.c_str());
    }
    mpResult SetGlassesTexture(ItemId id, GlassesTexType tex, std::string pathImg) {
        mpResult result;
        if (std::strcmp(pathImg.c_str(), "") == 0) {
            result = this->SetGlassesTexture(id, tex, NULL);
        } else {
            result = this->SetGlassesTexture(id, tex, pathImg.c_str());
        }
        return result;
    }
    mpResult ChangeTexture(ItemId id, int w, int h, intptr_t rgba) {
        return this->ChangeTexture(id, w, h, reinterpret_cast<unsigned char *>(rgba));
    }
#endif

    /**
     * set item feature points
     *
     * @param id : item data id to be controlled
     * @param fp : item feature points to set
     */
    mpResult SetFeaturePoint(ItemId id, const float fp[]);

    /**
     * get feature points
     *
     * @param id : item data id to be controlled
     * @param fp : item feature points to get
     */
    mpResult GetFeaturePoint(ItemId id, float fp[]);

#ifdef WEBGL
    mpResult SetFeaturePoint(ItemId id,  intptr_t fp) {
        return this->SetFeaturePoint(id, reinterpret_cast<float*>(fp));
    }
    mpResult GetFeaturePoint(ItemId id,  intptr_t fp) {
        return this->GetFeaturePoint(id, reinterpret_cast<float*>(fp));
    }
#endif

    /**
     */
    MpCtlItem();
    virtual ~MpCtlItem();

    MpCtlItemImpl *mp_;

};


} // namespace motionportrait

#endif /* MPCTLITEM_H_ */
